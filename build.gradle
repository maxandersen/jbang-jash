plugins {
	id 'java-library'
	id 'io.toolebox.git-versioner' version '1.6.7'
	id 'com.diffplug.spotless' version '7.0.3'
	id 'maven-publish'
	id 'org.jreleaser' version '1.17.0'
}

group = 'dev.jbang'

def javaVersion = System.getProperty('java.version')
def majorVersion = javaVersion.split('\\.')[0].toInteger()
if (majorVersion < 11) {
	throw new GradleException("""
		⚠️ This build requires Java 11 or newer but you're using Java ${javaVersion}
		Please use JAVA_HOME with Java 11 or newer to run this build.
		Current JAVA_HOME: ${System.getProperty('java.home')}.
		If you have jbang installed, you can run it with:
		eval \$(jbang jdk java-env 11+)
	""".stripIndent())
}

javadoc {
	options.encoding = 'UTF-8'
	//remove this to see all the missing tags/parameters.
	options.addStringOption('Xdoclint:none', '-quiet')
}

repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(11))
	}
	withJavadocJar()
	withSourcesJar()
}

compileJava {
	options.encoding = 'UTF-8'
	options.release = 8;
}

versioner {
	pattern {
		pattern = "%M.%m.%p(.%c-SNAPSHOT)"
	}
	git {
		authentication {
			https {
				token = project.hasProperty('github_token') ? getProperty('github_token') : "unknown_github_token"
			}
		}
	}
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.assertj:assertj-core:3.27.3"
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

spotless {
	format 'misc', {
		target '**/*.gradle', '**/*.md', '**/.gitignore'
		targetExclude 'build/**/*', 'out/**/*'
		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}
	java {
		importOrder 'java', 'javax', 'org', 'com', 'dev.jbang', ''
		removeUnusedImports()
		eclipse().configFile "misc/eclipse_formatting_nowrap.xml"
		targetExclude 'build/**/*'
	}
	format 'xml', {
		targetExclude 'build/test-results', fileTree('.idea')
		target '**/*.xml', '**/*.nuspec'
	}
}

test {
	useJUnitPlatform()

	// Include IT tests
	include '**/*IT.class'
	include '**/*Test.class'

	// Add test logging
	//testLogging {
	//	events "passed", "skipped", "failed"
	//	showStandardStreams = true
	//}

	if (project.hasProperty('testDiagnostics')) {
		// Memory diagnostics
		jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
		jvmArgs "-XX:HeapDumpPath=build/heapdumps"
		jvmArgs "-XX:MaxMetaspaceSize=256m"

		// GC logging
		jvmArgs "-verbose:gc"
		jvmArgs "-XX:+PrintGCDetails"
		jvmArgs "-Xloggc:build/gc.log"

		// Thread dumps on OOM
		jvmArgs "-XX:+HeapDumpBeforeFullGC"
		jvmArgs "-XX:+HeapDumpAfterFullGC"

		// Enable flight recorder
		jvmArgs "-XX:StartFlightRecording=filename=build/flight.jfr,dumponexit=true,settings=profile"

		// Enable native memory tracking
		jvmArgs "-XX:NativeMemoryTracking=detail"

		// Enable more detailed error reporting
		jvmArgs "-XX:+ShowCodeDetailsInExceptionMessages"

		// Enable class unloading
		jvmArgs "-XX:+ClassUnloading"
		jvmArgs "-XX:+ClassUnloadingWithConcurrentMark"

		// Add debug logging
		testLogging {
			events "passed", "skipped", "failed", "standardOut", "standardError"
			exceptionFormat "full"
			showCauses true
			showExceptions true
			showStackTraces true
		}

		// Print diagnostic information
		doFirst {
			println "Running tests with diagnostic options:"
			println "  - Heap size: ${maxHeapSize}"
			println "  - GC Log: build/gc.log"
			println "  - Flight Recorder: build/flight.jfr"
			println "  - Heap Dumps: build/heapdumps"
		}
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = 'dev.jbang'
			artifactId = 'jash'

			from components.java

			pom {
				name = 'JBang Jash'
				description = 'A Java library to provide a Process interface that is fluent, predictable and with a great developer experience.'
				url = 'https://github.com/jbangdev/jbang-jash'
				inceptionYear = '2025'
				licenses {
					license {
						name = 'Apache License, Version 2.0'
						url = 'https://github.com/jbangdev/jbang-jash/blob/main/LICENSE'
					}
				}
				developers {
					developer {
						id = 'maxandersen'
						name = 'Max Rydahl Andersen'
					}
					developer {
						id = 'quintesse'
						name = 'Tako Schotanus'
					}
					developer { // creator of fluent-process of which jash is a fork
						id = 'teoincontatto'
						name = 'Matteo Melli'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/jbangdev/jbang-jash'
					developerConnection = 'scm:git:https://github.com/jbangdev/jbang-jash'
					url = 'http://github.com/jbangdev/jbang-jash'
				}
			}
		}
	}

	repositories {
		maven {
			url = layout.buildDirectory.dir('staging-deploy')
		}
	}
}

jreleaser {
	configFile = file('jreleaser.yml')
}

// Register test tasks for different Java versions
def testJavaVersions = [11, 17, 21]
testJavaVersions.each { version ->
	tasks.register("testJava${version}", Test) {
		group = 'verification'
		description = "Runs the test suite using Java ${version}"

		javaLauncher = javaToolchains.launcherFor {
			languageVersion = JavaLanguageVersion.of(version)
		}

		// Copy all test configuration from the main test task
		testClassesDirs = sourceSets.test.output.classesDirs
		classpath = sourceSets.test.runtimeClasspath

		// Use JUnit 5
	// useJUnitPlatform()

		// Include IT tests
		include '**/*IT.class'
		include '**/*Test.class'

		// Add test logging
		testLogging {
			events "failed"
			//showStandardStreams = true
		}

		// Inherit test diagnostics if enabled
		if (project.hasProperty('testDiagnostics')) {
			jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
			jvmArgs "-XX:HeapDumpPath=build/heapdumps"
			jvmArgs "-XX:MaxMetaspaceSize=256m"
			jvmArgs "-verbose:gc"
			jvmArgs "-XX:+PrintGCDetails"
			jvmArgs "-Xloggc:build/gc.log"
			jvmArgs "-XX:+HeapDumpBeforeFullGC"
			jvmArgs "-XX:+HeapDumpAfterFullGC"
			jvmArgs "-XX:StartFlightRecording=filename=build/flight.jfr,dumponexit=true,settings=profile"
			jvmArgs "-XX:NativeMemoryTracking=detail"
			jvmArgs "-XX:+ShowCodeDetailsInExceptionMessages"
			jvmArgs "-XX:+ClassUnloading"
			jvmArgs "-XX:+ClassUnloadingWithConcurrentMark"

			testLogging {
				events "passed", "skipped", "failed", "standardOut", "standardError"
				exceptionFormat "full"
				showCauses true
				showExceptions true
				showStackTraces true
			}
		}

		// Configure the task to continue even if tests fail
		ignoreFailures = true
	}
}

// Create a task to run all test versions
tasks.register('testAllJavaVersions') {
	group = 'verification'
	description = 'Runs tests on all supported Java versions'
	dependsOn testJavaVersions.collect { "testJava${it}" }
}

// Make the default test task depend on testJava11
test.dependsOn testJava11
